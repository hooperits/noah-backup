name: Noah Backup - Continuous Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy'
        required: false
        type: string

env:
  JAVA_VERSION: '17'
  REGISTRY: ghcr.io
  IMAGE_NAME: noah-backup

jobs:
  # Build and Push Container Images
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Build application
        run: ./gradlew build -x test

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign container image
        uses: sigstore/cosign-installer@v3
      - run: cosign sign --yes ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: 1

  # Security Compliance Check
  security-compliance:
    name: Security Compliance
    runs-on: ubuntu-latest
    needs: [build-and-push]
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-and-push.outputs.image-tag }}
          format: 'json'
          output: 'trivy-results.json'

      - name: Check vulnerability count
        run: |
          HIGH_VULNS=$(cat trivy-results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length')
          CRITICAL_VULNS=$(cat trivy-results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length')
          
          echo "High vulnerabilities: $HIGH_VULNS"
          echo "Critical vulnerabilities: $CRITICAL_VULNS"
          
          if [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "❌ Critical vulnerabilities found. Blocking deployment."
            exit 1
          fi
          
          if [ "$HIGH_VULNS" -gt 5 ]; then
            echo "⚠️ High number of high-severity vulnerabilities found."
            echo "Consider updating dependencies before deployment."
          fi

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-scan-results
          path: trivy-results.json

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push, security-compliance]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.noah-backup.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

      - name: Deploy to Kubernetes
        uses: azure/k8s-deploy@v1
        with:
          manifests: |
            k8s/staging/namespace.yml
            k8s/staging/configmap.yml
            k8s/staging/secret.yml
            k8s/staging/deployment.yml
            k8s/staging/service.yml
            k8s/staging/ingress.yml
          images: ${{ needs.build-and-push.outputs.image-tag }}
          namespace: noah-backup-staging

      - name: Wait for deployment
        run: |
          kubectl rollout status deployment/noah-backup -n noah-backup-staging --timeout=300s

      - name: Run smoke tests
        run: |
          # Wait for service to be ready
          sleep 30
          
          # Test health endpoint
          curl -f https://staging.noah-backup.com/actuator/health
          
          # Test authentication
          curl -f -X POST https://staging.noah-backup.com/api/v1/auth/status
          
          # Test basic API endpoints
          curl -f https://staging.noah-backup.com/api/v1/config/system

      - name: Notify staging deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#noah-backup-deployments'
          text: '🚀 Noah Backup deployed to staging: https://staging.noah-backup.com'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, security-compliance, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://noah-backup.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

      - name: Create production backup
        run: |
          # Create database backup before deployment
          kubectl exec -n noah-backup-production deployment/postgres -- \
            pg_dump -U noah_backup noah_backup > backup-$(date +%Y%m%d-%H%M%S).sql

      - name: Deploy to Production Kubernetes
        uses: azure/k8s-deploy@v1
        with:
          manifests: |
            k8s/production/namespace.yml
            k8s/production/configmap.yml
            k8s/production/secret.yml
            k8s/production/deployment.yml
            k8s/production/service.yml
            k8s/production/ingress.yml
          images: ${{ needs.build-and-push.outputs.image-tag }}
          namespace: noah-backup-production
          strategy: blue-green

      - name: Wait for production deployment
        run: |
          kubectl rollout status deployment/noah-backup -n noah-backup-production --timeout=600s

      - name: Run production smoke tests
        run: |
          # Wait for service to be ready
          sleep 60
          
          # Test health endpoint
          curl -f https://noah-backup.com/actuator/health
          
          # Test authentication with prod credentials
          TOKEN=$(curl -s -X POST https://noah-backup.com/api/v1/auth/login \
            -H "Content-Type: application/json" \
            -d "{\"username\":\"${{ secrets.PROD_ADMIN_USER }}\",\"password\":\"${{ secrets.PROD_ADMIN_PASS }}\"}" | \
            jq -r '.token')
          
          # Test authenticated endpoints
          curl -f -H "Authorization: Bearer $TOKEN" \
            https://noah-backup.com/api/v1/backup/health

      - name: Update production monitoring
        run: |
          # Update monitoring dashboards with new version
          curl -X POST "https://grafana.company.com/api/annotations" \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "text": "Noah Backup ${{ github.ref_name }} deployed to production",
              "tags": ["deployment", "noah-backup", "production"]
            }'

      - name: Notify production deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#noah-backup-deployments'
          text: '🎉 Noah Backup ${{ github.ref_name }} deployed to production: https://noah-backup.com'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback capability
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    needs: [deploy-staging, deploy-production]
    
    steps:
      - name: Rollback staging
        if: needs.deploy-staging.result == 'failure'
        run: |
          kubectl rollout undo deployment/noah-backup -n noah-backup-staging

      - name: Rollback production
        if: needs.deploy-production.result == 'failure'
        run: |
          kubectl rollout undo deployment/noah-backup -n noah-backup-production

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#noah-backup-deployments'
          text: '🚨 Noah Backup deployment failed and was rolled back!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}