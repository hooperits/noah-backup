name: Noah Backup - Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        default: 'minor'
        type: choice
        options:
          - patch
          - minor
          - major
          - pre-release
      generate_changelog:
        description: 'Generate changelog'
        required: false
        default: true
        type: boolean

env:
  JAVA_VERSION: '17'

jobs:
  # Create Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release-version: ${{ steps.version.outputs.version }}
      release-url: ${{ steps.create-release.outputs.html_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for changelog generation

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Generate changelog
        id: changelog
        if: github.event.inputs.generate_changelog != 'false'
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          configuration: ".github/changelog-config.json"
          toTag: ${{ steps.version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Build release artifacts
        run: |
          ./gradlew clean build -x test
          ./gradlew bootJar

      - name: Create release notes
        id: release-notes
        run: |
          cat > release-notes.md << 'EOF'
          # Noah Backup ${{ steps.version.outputs.version }}
          
          ## 🚀 What's New
          
          This release includes security enhancements, performance improvements, and new backup features.
          
          ## 📋 Release Highlights
          
          ### ✅ New Features
          - Enhanced security hardening with comprehensive input validation
          - Advanced audit logging system with compliance support
          - Multi-level rate limiting and DOS protection
          - Improved backup reporting with notifications
          - Professional REST API with JWT authentication
          
          ### 🔧 Improvements
          - Better error handling and logging
          - Enhanced configuration management
          - Improved backup performance
          - Better integration with external systems
          
          ### 🛡️ Security
          - OWASP Top 10 compliance
          - Enhanced encryption for sensitive data
          - Comprehensive security audit logging
          - Advanced threat detection and prevention
          
          ### 🐛 Bug Fixes
          - Various stability and performance fixes
          - Improved error handling in backup operations
          - Better validation of configuration parameters
          
          ## 📚 Documentation
          
          - Complete API documentation
          - Security hardening guide
          - Deployment and configuration guides
          - Best practices documentation
          
          ## 🔄 Upgrade Instructions
          
          1. Stop the current Noah Backup service
          2. Backup your configuration files
          3. Install the new version using provided artifacts
          4. Update configuration if needed
          5. Start the service and verify operation
          
          ## ⚠️ Breaking Changes
          
          - None in this release
          
          ## 🔗 Useful Links
          
          - [Installation Guide](https://github.com/your-org/noah-backup/wiki/Installation)
          - [Configuration Guide](https://github.com/your-org/noah-backup/wiki/Configuration)
          - [API Documentation](https://github.com/your-org/noah-backup/wiki/API)
          - [Security Guide](https://github.com/your-org/noah-backup/wiki/Security)
          
          ${{ steps.changelog.outputs.changelog }}
          EOF

      - name: Create GitHub Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Noah Backup ${{ steps.version.outputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, 'pre') || contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'rc') }}

      - name: Upload JAR artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./demo-application/build/libs/demo-application-${{ steps.version.outputs.version }}.jar
          asset_name: noah-backup-${{ steps.version.outputs.version }}.jar
          asset_content_type: application/java-archive

      - name: Create distribution ZIP
        run: |
          mkdir -p dist/noah-backup-${{ steps.version.outputs.version }}
          
          # Copy JAR files
          cp */build/libs/*.jar dist/noah-backup-${{ steps.version.outputs.version }}/
          
          # Copy documentation
          cp README.md dist/noah-backup-${{ steps.version.outputs.version }}/
          cp -r docs dist/noah-backup-${{ steps.version.outputs.version }}/ 2>/dev/null || true
          
          # Copy configuration examples
          mkdir -p dist/noah-backup-${{ steps.version.outputs.version }}/config
          cp */src/main/resources/application*.properties dist/noah-backup-${{ steps.version.outputs.version }}/config/ 2>/dev/null || true
          
          # Copy scripts
          mkdir -p dist/noah-backup-${{ steps.version.outputs.version }}/scripts
          cp filesystem-windows/src/main/resources/*.ps1 dist/noah-backup-${{ steps.version.outputs.version }}/scripts/ 2>/dev/null || true
          
          # Create ZIP
          cd dist
          zip -r noah-backup-${{ steps.version.outputs.version }}.zip noah-backup-${{ steps.version.outputs.version }}/

      - name: Upload distribution ZIP
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./dist/noah-backup-${{ steps.version.outputs.version }}.zip
          asset_name: noah-backup-${{ steps.version.outputs.version }}.zip
          asset_content_type: application/zip

  # Build and Push Release Images
  release-images:
    name: Release Container Images
    runs-on: ubuntu-latest
    needs: [create-release]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}/noah-backup
            ${{ secrets.DOCKER_USERNAME }}/noah-backup
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push multi-platform images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security Scan Release
  security-scan-release:
    name: Security Scan Release
    runs-on: ubuntu-latest
    needs: [release-images]
    
    steps:
      - name: Run comprehensive security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository }}/noah-backup:${{ needs.create-release.outputs.release-version }}'
          format: 'json'
          output: 'release-security-scan.json'

      - name: Generate security report
        run: |
          # Generate human-readable security report
          cat release-security-scan.json | jq -r '
            .Results[]? | 
            select(.Vulnerabilities) | 
            .Vulnerabilities[] | 
            "\(.Severity): \(.VulnerabilityID) in \(.PkgName) - \(.Title)"
          ' > security-report.txt

      - name: Upload security scan to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./security-report.txt
          asset_name: security-scan-report.txt
          asset_content_type: text/plain

  # Notify Release
  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, release-images, security-scan-release]
    if: always()
    
    steps:
      - name: Notify successful release
        if: needs.create-release.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#noah-backup-releases'
          text: |
            🎉 Noah Backup ${{ needs.create-release.outputs.release-version }} has been released!
            
            📦 Release: ${{ needs.create-release.outputs.release-url }}
            🐳 Container Images: Available on GitHub Container Registry and Docker Hub
            🛡️ Security: Scanned and verified
            
            Ready for deployment! 🚀
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify failed release
        if: contains(needs.*.result, 'failure')
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#noah-backup-releases'
          text: |
            ❌ Noah Backup release ${{ needs.create-release.outputs.release-version }} failed!
            
            Please check the workflow logs and fix any issues.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create follow-up deployment issue
        if: needs.create-release.result == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Deploy Noah Backup ${{ needs.create-release.outputs.release-version }} to Production',
              body: `## 🚀 Production Deployment
              
              Noah Backup ${{ needs.create-release.outputs.release-version }} is ready for production deployment.
              
              ### Pre-deployment Checklist
              - [ ] Review release notes and changelog
              - [ ] Verify staging deployment is stable
              - [ ] Security scan review completed
              - [ ] Database migration scripts reviewed (if any)
              - [ ] Rollback plan prepared
              - [ ] Monitoring alerts configured
              
              ### Deployment Steps
              1. Schedule maintenance window
              2. Create production backup
              3. Deploy via CD pipeline or manual process
              4. Run post-deployment verification
              5. Update monitoring dashboards
              6. Communicate deployment completion
              
              ### Release Information
              - **Version**: ${{ needs.create-release.outputs.release-version }}
              - **Release URL**: ${{ needs.create-release.outputs.release-url }}
              - **Container Images**: Available on registries
              - **Security Status**: ✅ Verified
              
              /cc @deployment-team`,
              labels: ['deployment', 'production', 'release']
            })